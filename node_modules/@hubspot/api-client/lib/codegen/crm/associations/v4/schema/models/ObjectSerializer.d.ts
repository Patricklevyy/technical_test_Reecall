export * from '../models/AssociationSpec';
export * from '../models/AssociationSpecWithLabel';
export * from '../models/BatchInputPublicAssociationMultiArchive';
export * from '../models/BatchInputPublicAssociationMultiPost';
export * from '../models/BatchInputPublicDefaultAssociationMultiPost';
export * from '../models/BatchInputPublicFetchAssociationsBatchRequest';
export * from '../models/BatchResponseLabelsBetweenObjectPair';
export * from '../models/BatchResponseLabelsBetweenObjectPairWithErrors';
export * from '../models/BatchResponsePublicAssociationMultiWithLabel';
export * from '../models/BatchResponsePublicAssociationMultiWithLabelWithErrors';
export * from '../models/BatchResponsePublicDefaultAssociation';
export * from '../models/CollectionResponseAssociationSpecWithLabelNoPaging';
export * from '../models/ErrorCategory';
export * from '../models/ErrorDetail';
export * from '../models/LabelsBetweenObjectPair';
export * from '../models/ModelError';
export * from '../models/MultiAssociatedObjectWithLabel';
export * from '../models/NextPage';
export * from '../models/Paging';
export * from '../models/PreviousPage';
export * from '../models/PublicAssociationDefinitionCreateRequest';
export * from '../models/PublicAssociationDefinitionUpdateRequest';
export * from '../models/PublicAssociationMultiArchive';
export * from '../models/PublicAssociationMultiPost';
export * from '../models/PublicAssociationMultiWithLabel';
export * from '../models/PublicDefaultAssociation';
export * from '../models/PublicDefaultAssociationMultiPost';
export * from '../models/PublicFetchAssociationsBatchRequest';
export * from '../models/PublicObjectId';
export * from '../models/StandardError';
export declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): any;
    static serialize(data: any, type: string, format: string): any;
    static deserialize(data: any, type: string, format: string): any;
    static normalizeMediaType(mediaType: string | undefined): string | undefined;
    static getPreferredMediaType(mediaTypes: Array<string>): string;
    static stringify(data: any, mediaType: string): string;
    static parse(rawData: string, mediaType: string | undefined): any;
}
