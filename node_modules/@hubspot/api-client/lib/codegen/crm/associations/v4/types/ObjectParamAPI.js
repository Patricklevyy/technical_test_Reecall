"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectBatchApi = exports.ObjectBasicApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class ObjectBasicApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableBasicApi(configuration, requestFactory, responseProcessor);
    }
    archive(param, options) {
        return this.api.archive(param.objectType, param.objectId, param.toObjectType, param.toObjectId, options).toPromise();
    }
    create(param, options) {
        return this.api.create(param.objectType, param.objectId, param.toObjectType, param.toObjectId, param.associationSpec, options).toPromise();
    }
    createDefault(param, options) {
        return this.api.createDefault(param.fromObjectType, param.fromObjectId, param.toObjectType, param.toObjectId, options).toPromise();
    }
    getPage(param, options) {
        return this.api.getPage(param.objectType, param.objectId, param.toObjectType, param.after, param.limit, options).toPromise();
    }
}
exports.ObjectBasicApi = ObjectBasicApi;
const ObservableAPI_2 = require("./ObservableAPI");
class ObjectBatchApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableBatchApi(configuration, requestFactory, responseProcessor);
    }
    archive(param, options) {
        return this.api.archive(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationMultiArchive, options).toPromise();
    }
    archiveLabels(param, options) {
        return this.api.archiveLabels(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationMultiPost, options).toPromise();
    }
    create(param, options) {
        return this.api.create(param.fromObjectType, param.toObjectType, param.batchInputPublicAssociationMultiPost, options).toPromise();
    }
    createDefault(param, options) {
        return this.api.createDefault(param.fromObjectType, param.toObjectType, param.batchInputPublicDefaultAssociationMultiPost, options).toPromise();
    }
    getPage(param, options) {
        return this.api.getPage(param.fromObjectType, param.toObjectType, param.batchInputPublicFetchAssociationsBatchRequest, options).toPromise();
    }
}
exports.ObjectBatchApi = ObjectBatchApi;
//# sourceMappingURL=ObjectParamAPI.js.map